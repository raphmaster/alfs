#!/bin/bash

#Parameters check
if [ $# -lt 4 ]; then
    echo -e 'Invalid number of parameters!
USAGE: alfs wdir deps packs procs [start]

DESCRIPTION:
alfs is a tool to automate the build of packages.
based on a csv dependencies file, alfs execute package scripts to build dependencies.
all package scripts must be placed in the same directory as this script.
in the dependencies file, all package scripts on one line must be successfully executed before executing scripts of the next line.
each package name in dependencies file must match the name of an executable script in the same directory of alfs script.
the package names in dependencies file must follow this uasge: [#]package[#param]...
a # character can be inserted at the beginning of the package name in dependencies file to indicate that the script must be executed in the current shell context, otherwise script are executed in a separate shell context.
many others # can be inserted after the package name to pass parameters to the package script.
anything after the double slash charaters "//" on a line will be treated as a comment.
the package urls file caintains urls to download package from.
in this file, each line must contain the package name followed by a tab character and the download url: package<tab>url...

PARAMETERS:
wdir: the working directory where all packages will be built
deps: the comma-separated-value file that list all packages dependencies and build order
packs: the file that contains urls to download packages.
procs: the number of maximum processors to use
[start]: the optional starting package in dependencies file'; 
    exit 1;
fi
if [ ! -d $1 ]; then sudo mkdir -pv $1 || { echo 'Unable to create working directory:' $1; exit 1; }; fi
if [ ! -e $2 ]; then echo 'Unable to locate dependencies CSV file:' $2; exit 1; fi
if [ ! -e $3 ]; then echo 'Unable to locate packages download URLs file:' $3; exit 1; fi
if [[ ! $4 =~ ^[0-9]+$ ]]; then echo 'Invalid number of processors to use:' $4; exit 1; fi

#recover absolute script directory
sdir=$(pwd)/$(dirname $0)/ &&
sdir=${sdir/#+(\/)//} && #remove all starting "/" in excess
#Source script library
. ${sdir}lib &&
#If working directory do not have trailing slash, add it
if [[ $1 =~ /$ ]]; then wdir=$1
else wdir=${1}/; fi &&
#If working directory is not an absolute path, make it absolute
if [[ ! $wdir =~ ^/ ]]; then wdir=$(pwd)/$wdir; fi &&
#If dependencies CSV file path is not an absolute path, make it absolute
if [[ $2 =~ ^/ ]]; then deps=$2
else deps=$(pwd)/$2; fi &&
#If package download URLs file is not an absolute path, make it absolute
if [[ $3 =~ ^/ ]]; then packs=$3
else packs=$(pwd)/$3; fi &&
#export required names
export sdir wdir deps packs procs=$4 &&
#Check if we need to start at a specific package in dependencies
start='false' &&
if [ $# -eq 5 ]; then start='true'; fi &&
#Download all packages from URLs file if necessary
if [ $start == 'false' ]; then
    #Creating sources directory where all packages will be downloaded and grant current user full access
    sudo mkdir -pv ${wdir}sources &&
    sudo chown -Rv $(id -un): ${wdir}sources &&
    sudo chmod -v 750 ${wdir}sources &&
    cut -f 2- $packs | tr '\t' '\n' | wget -i - -nc -P ${wdir}sources
fi &&
#For each line in dependencies file
line=1 &&
until [ $line -gt $(wc -l $deps | cut -d ' ' -f 1) ]
do
    #For each package in line, comments removed
    for package in $(sed "${line}q;d" $deps | sed 's@//.*@@' | tr ',' ' ')
    do
	#if we need to start at a specific package
	if [ $start = 'true' ]; then
	    #Check if we reached the starting package
	    if [ $package == $5 ]; then start='false'; fi
	fi &&
	#if we reached the starting package
	if [ $start = 'false' ]; then
	    #Packages starting with # are run in the current shell context
	    if [[ $package =~ ^# ]]; then
		args=($(echo $package | cut -d '#' -f 2- | tr '#' ' ')) &&
		pre='. '
	    #Others are run in subshell (separate shell context)
	    else
		args=($(echo $package | tr '#' ' ')) &&
		pre=''
	    fi &&
	    #evaluate arguments and capture errors
	    { arg_eval || { echo "invalid argument for package $package"; exit 1; }; } &&
	    #Run package script and capture errors
	    ${pre}${sdir}${args[@]} || { echo $package 'script failed!'; exit 1; }
	fi
    done &&
    (( line++ ))
done &&
echo 'alfs script success!'
